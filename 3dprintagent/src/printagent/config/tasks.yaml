observation_task:
  description: >
    The task is to given an image of an ongoing 3D print taken from the
    top and front camera looking at the current state of the print. the task is to analyze the image thoroughly, identify any
    potential issues with the print, and provide detailed insights into the nature of the problems observed. 3D printer bed is
    perfectly leveled. You should ignore the areas in the previous layer and only consider current layer.
  expected_output: >
    A JSON with the following structure.
    {
    "Problems":" Problems found/No problems found (depending on if a failure was identified)"
    "Observations": "[list of detailed observations you can make on the ongoing 3D print which will help identify the issues]"
    "Failure": [List of the most prominent and most common failure modes based only on the observations]
    "Previous solution status:" Ignore if no previous segment. If previous segment, give a brief overview if the implemented
    solution worked or the issue was unchanged.
    "Print_Rating": a number out of 10
    }
  agent: observer


reasoning_task:
  description: >
    Given Observations
    Observations: {observations}
    the task is to rephrase, rewrite, and
    reorder each reasoning module to better
    identify the information needed to resolve
    these issues in the next layer. Additionally,
    enhance the reasoning with relevant details
    to determine which parameters
    essential for solving the problem.
    Reasoning Modules:
    "1. What are the possible reasons for the observations and failure in the last layer?",
    "2. Analyze the information and data you already have regarding the documentation, print parameters, and material properties during the failure.",
    "3. Given the current print parameters [given information known] as observed during ,the last layer, what are the best parameters to adjust to solve the
    failure in the next layer without human intervention?",
    "4. What are the controllable parameters that can be changed to solve the failure in the next layer?",
    "5. How would you solve the problems without human intervention?",
    "6. Break down the problem into smaller parts and identify the most significant ,contributing factors to the failure. Consider aspects such as material
    properties, print parameters, and potential G-code commands to use.",
    "7. What solution does a human need to perform to solve the problem in the next layer without discarding the print?",
    "8. What solution does the machine need to perform to solve the problem in the next layer without discarding the print?",
    " 9. Provide step-by-step instructions to solve the problem in the next layer without discarding the print or using human intervention.",
    "10. Given the commands specific to the printer, what commands should be used to solve the problem in the next layer without discarding the print?",
    "11. What parameters, when changed, will impact the quality of the 3D print?",
    "12. What should be the correct values for the parameter changes?",
    "13. Are the parameter values like bed temperature, extruder temperature, speed factor, extrusion factor, etc., correct for the given filament type?",
    "14. How can you optimize the cooling settings to improve print quality?",
    "15. How can adjusting the retraction settings help solve the observed failures?",
    "16. What adjustments to the layer height or width could improve print consistency?",
    "17. Based on the observations what is failure modes?",
    "18. Given current parameters values and information known what would be the best values for them so that the problem is solved in the next
    segment/layer?",
    '19. Are there other parameters to consider? what are those? what should be the values?"
  expected_output: >
    List of relevant and useful information.     
  agent: reasoner

planning_task:
  description: >
    Given the observed failures: {observations} in the current layer, the task is to think step by step
    and create a step-by-step plan to operationalize the reasoning modules {adapted_recon_reasoning}. This plan should gather
    information about the most contributing factors to resolve the failure in the next layer to ensure print rating is 10/10.
    Constraints:
    - No Access to G-Code and Slicer
    - Available Objects for Query :{printer_obj}
    Tasks:
    1. Identify Potential Causes :
    - Provide a list of potential causes for the observed failure.
    2. Information Gathering :
    - Based on the potential causes, specify the information that should be gathered from the printer to narrow down the potential
    cause
    - Include information requiring human intervention
    - Identify the most significant factors causing failures that can be queried by a basic 3D printer running Moonraker
    - Specify environmental information required and any advanced information that might not be available on basic 3D
    printers
    Requirements:
    - Ensure the information needed is very specific and focuses on the most probable cause of the failure.
    - Avoid semantically repeated or redundant information.
    Provided Information:
    - Known Information : {information_known}
    Note :the task is to think step-by-step like an engineer and generate a comprehensive list of required information to
    facilitate accurate conclusions in similar future tasks. Do not produce invalid content.
  expected_output: >
    List of all the results from the task.
  agent: planner

execution_task:
  description: >
    the task is to query a 3D printer running the Moonraker API for requested information.
    the agent has access to the following tools:{tools}
    Here is the information known to you: {information_known}
    NOTE: The current maximum print speed is (speed*speed_factor) found in gcode_move.
    Here are the printer and Gcode objects you can query {printer_obj}
    the agent can write additional python code to interpret the information or process information from the
    printer. If you dont find the required info try semantically similar words.
  expected_output: >
    The output follows the below JSON
    {
    Question: the input question you must answer,
    Thought: you should always think about what to do,
    Action: the action to take, should be one of [{tool_names}],
    Action Input: the input to the action,
    Observation: the result of the action
    }
  agent: executor